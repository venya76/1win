from aiogram import F, Router, types, Bot
from aiogram.filters.command import CommandStart
from keyboards.admin import admin_command, get_mailing_type_keyboard
from database.db import DataBase
from aiogram.fsm.context import FSMContext
from database.db import DataBase
from config import ADMIN_ID
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.fsm.state import State, StatesGroup
class Admin_States(StatesGroup):

    get_userinfo = State()
    give_balance = State()
    

    get_userinfo_del = State()
    delete_balance = State()


    mailing_type = State()
    mailing_text = State()

router = Router()

@router.message(F.text == '/admin')
async def admin_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await state.clear()
        users_count = await DataBase.get_users()
        money_list = await DataBase.get_users()
        money_count = 0

        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=await admin_command(), parse_mode="HTML")

@router.callback_query(F.data == 'stat')
async def statistics_handler(callback: types.CallbackQuery):
    users_count = await DataBase.get_users_count()
    verified_count = await DataBase.get_verified_users_count()
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º –∏ –±–µ–∑
    users = await DataBase.get_users()
    deposit_count = 0
    no_deposit_count = 0
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    languages = {
        'ru': '–†—É—Å—Å–∫–∏–π',
        'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'hi': '–•–∏–Ω–¥–∏',
        'br': '–ë—Ä–∞–∑–∏–ª–∏—è',
        'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
        'uz': '–£–∑–±–µ–∫—Å–∫–∏–π',
        'az': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π',
        'tr': '–¢—É—Ä–µ—Ü–∫–∏–π',
        'pt': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
        'ar': '–ê—Ä–∞–±—Å–∫–∏–π'
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    lang_counts = {code: 0 for code in languages.keys()}
    
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —è–∑—ã–∫–∏, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
    other_lang_count = 0
    
    for user in users:
        user_id = user[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ user[1] —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deposit_status = await DataBase.get_deposit_status(user_id)
        if deposit_status == 'dep':
            deposit_count += 1
        else:
            no_deposit_count += 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ user[2] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
        # –ò–∑–º–µ–Ω–∏—Ç–µ –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –ø–æ–ª–µ lang –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        lang = user[2].lower() if user[2] else 'unknown'
        if lang in lang_counts:
            lang_counts[lang] += 1
        else:
            other_lang_count += 1
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    language_stats = ""
    for code, name in languages.items():
        count = lang_counts.get(code, 0)
        language_stats += f"‚Ä¢ <b>{name} ({code})</b>: <code>{count}</code>\n"
    
    # (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
    if other_lang_count > 0:
        language_stats += f"‚Ä¢ <b>–î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏</b>: <code>{other_lang_count}</code>\n"
    
    statistics_message = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{users_count}</code>\n"
        f"‚úÖ <b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{verified_count}</code>\n"
        f"üí∞ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º:</b> <code>{deposit_count}</code>\n"
        f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> <code>{no_deposit_count}</code>\n\n"
        f"<b>üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:</b>\n"
        f"{language_stats}"
    )
    await callback.message.answer(statistics_message, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == 'mailing')
async def choose_mailing_type(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=await get_mailing_type_keyboard())
    await state.set_state(Admin_States.mailing_type)

@router.callback_query(F.data.startswith('mailing_'))
async def set_mailing_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'decline_mailing':
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=await admin_command())
        await state.clear()
        return

    mailing_type = callback.data
    await state.update_data(mailing_type=mailing_type)
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Admin_States.mailing_text)
    await callback.answer()

@router.message(Admin_States.mailing_text)
async def mailing_state(message: types.Message, state: FSMContext, bot: Bot):
    mailing_message = message.message_id
    ikb = InlineKeyboardBuilder()
    ikb.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_mailing')
    ikb.button(text='–û—Ç–º–µ–Ω–∞', callback_data='decline_mailing')
    ikb.adjust(2)
    
    await bot.copy_message(
        chat_id=message.chat.id,
        from_chat_id=message.chat.id,
        message_id=mailing_message,
        reply_markup=ikb.as_markup(),
        parse_mode="HTML"
    )
    await state.update_data(msg=mailing_message)

@router.callback_query(F.data == 'send_mailing')
async def mailing_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    mailing_message = data['msg']
    mailing_type = data['mailing_type']
    
    errors_count = 0
    good_count = 0
    users = await DataBase.get_users()
    filtered_users = []


    for user in users:
        user_id = user[1]
        verified_status = await DataBase.get_verified_status(user_id)
        deposit_status = await DataBase.get_deposit_status(user_id)

        if mailing_type == 'mailing_all':
            filtered_users.append(user)
        elif mailing_type == 'mailing_verified' and verified_status == 'verifed':
            filtered_users.append(user)
        elif mailing_type == 'mailing_deposit' and deposit_status == 'dep':
            filtered_users.append(user)
        elif mailing_type == 'mailing_new' and verified_status == 'verifed' and deposit_status == 'nedep':
            filtered_users.append(user)
        elif mailing_type == 'mailing_unverified_nodep' and verified_status == '0' and deposit_status == 'nedep':
            filtered_users.append(user)

    try:
        await callback.message.delete()
    except:
        pass
    
    status_message = await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")

    for user in filtered_users:
        try:
            await bot.copy_message(
                chat_id=user[1],
                from_chat_id=callback.from_user.id,
                message_id=mailing_message,
                parse_mode="HTML"
            )
            good_count += 1
        except Exception as ex:
            errors_count += 1
            print(ex)

    mailing_types_desc = {
        'mailing_all': '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        'mailing_verified': '–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        'mailing_deposit': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º',
        'mailing_new': '–Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞',
        'mailing_unverified_nodep': '–Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞'
    }

    result_message = (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_types_desc[mailing_type]}:</b>\n\n"
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> <code>{good_count}</code>\n"
        f"‚ùå <b>–û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <code>{errors_count}</code>"
    )

    try:
        await status_message.delete()
    except:
        pass

    await callback.message.answer(result_message, parse_mode="HTML", reply_markup=await admin_command())
    await state.clear()
@router.callback_query(F.data == 'decline_mailing')
async def decline_mailing(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=await admin_command())
    await state.clear()


@router.callback_query(F.data == "change_ref")
async def change_ref_handler(callback: types.CallbackQuery):
    current_ref = await DataBase.get_ref()
    message_text = (
        f"<b>–¢–µ–∫—É—â–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{current_ref}</code>\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>/set_ref –Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞</code>"
    )
    await callback.message.answer(message_text, parse_mode="HTML")
    await callback.answer()

@router.message(lambda message: message.text.startswith('/set_ref'))
async def set_ref_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        new_ref = message.text.split()[1]
        await DataBase.edit_ref(new_ref)
        await message.answer(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <code>{new_ref}</code>", parse_mode="HTML")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n/set_ref –Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞")